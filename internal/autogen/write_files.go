package main

import (
	"fmt"
	"os"
	"sort"
	"strings"
)

func methodToValues(method *Method) map[string]interface{} {
	return map[string]interface{}{
		`MethodName`:     method.Name,
		`InitCode`:       method.InitCode,
		`GetValueCode`:   method.GetValueCode,
		`ResultVariable`: method.ResultVariable,
		`FinishCode`:     method.FinishCode,
		`ResultSize`:     method.ResultSize,
		`AdditionalInfo`: method.AdditionalInfo,
	}
}

func WriteFiles(templates *Templates, methods Methods) error {
	fMap := map[string]*os.File{}
	getFileFunc := func(fileName string, packageName string, imports []string) *os.File {
		if f := fMap[fileName]; f != nil {
			return f
		}

		f, err := os.Create(fileName)
		if err != nil {
			panic(err)
		}

		sort.Strings(imports)

		var stdImports, extImports []string
		for _, _import := range imports {
			importWords := strings.Split(_import, `/`)
			if len(strings.Split(importWords[0], `.`)) > 1 {
				extImports = append(extImports, _import)
			} else {
				stdImports = append(stdImports, _import)
			}
		}
		var importsBlock string
		if len(stdImports) > 0 {
			importsBlock += "\t\"" + strings.Join(stdImports, "\"\n\t\"") + "\"\n"
		}
		if len(extImports) > 0 {
			if len(importsBlock) > 0 {
				importsBlock += "\n"
			}
			importsBlock += "\t\"" + strings.Join(extImports, "\"\n\t\"") + "\"\n"
		}
		_, _ = fmt.Fprintf(f, "package "+packageName+"\n\nimport (\n"+importsBlock+")\n\n")
		_, _ = fmt.Fprintln(f, `// This file was automatically generated by github.com/xaionaro-go/rand/internal/autogen`)

		fMap[fileName] = f
		return f
	}

	defer func() {
		for _, f := range fMap {
			_ = f.Close()
		}
	} ()

	for _, method := range methods {
		values := methodToValues(method)

		for _, enableReseed := range []bool{false, true} {
			values[`EnableReseed`] = enableReseed

			{
				for _, isXORRead := range []bool{false, true} {
					values[`IsXORRead`] = isXORRead

					if err := templates.Read.Execute(
						getFileFunc(`read_autogenerated.go`, `mathrand`, []string{`unsafe`}),
						values,
					); err != nil {
						return err
					}

					if err := templates.TestRead.Execute(
						getFileFunc(`read_autogenerated_test.go`, `mathrand_test`, []string{`testing`, `github.com/xaionaro-go/rand/mathrand`, `github.com/stretchr/testify/assert`}),
						values,
					); err != nil {
						return err
					}
				}

				delete(values, `IsXORRead`)
			}
		}

		{
			var testFileName string
			switch method.ResultSize {
			case 4:
				testFileName = `uint32_autogenerated_test.go`
			case 8:
				testFileName = `uint64_autogenerated_test.go`
			default:
				panic(fmt.Sprint(`unknown ResultSize`, method.ResultSize))
			}
			if err := templates.TestMethod.Execute(
				getFileFunc(testFileName, `mathrand_test`, []string{`testing`, `github.com/xaionaro-go/rand/mathrand`}),
				values,
			); err != nil {
				return err
			}
		}
	}

	return nil
}
