package main

import (
	"fmt"
	"os"
)

func methodToValues(method *Method) map[string]interface{} {
	return map[string]interface{}{
		`MethodName`:     method.Name,
		`InitCode`:       method.InitCode,
		`GetValueCode`:   method.GetValueCode,
		`ResultVariable`: method.ResultVariable,
		`FinishCode`:     method.FinishCode,
		`ResultSize`:     method.ResultSize,
		`AdditionalInfo`: method.AdditionalInfo,
	}
}

func WriteFiles(templates *Templates, methods Methods) error {
	{
		f, err := os.Create(`read_autogenerated.go`)
		if err != nil {
			return err
		}
		defer f.Close()

		fmt.Fprintf(f, "package mathrand\n\nimport \"unsafe\"\n")
		for _, method := range methods {
			err := templates.Read.Execute(f, methodToValues(method))
			if err != nil {
				return err
			}
		}

	}

	{
		f, err := os.Create(`read_autogenerated_test.go`)
		if err != nil {
			return err
		}
		defer f.Close()

		fmt.Fprintf(f, "package mathrand_test\n\nimport (\n\t\"testing\"\n\n\t\"github.com/xaionaro-go/rand/mathrand\"\n)\n")
		for _, method := range methods {
			err := templates.TestRead.Execute(f, methodToValues(method))
			if err != nil {
				return err
			}
		}

	}

	{
		f, err := os.Create(`uint32_autogenerated_test.go`)
		if err != nil {
			return err
		}
		defer f.Close()

		fmt.Fprintf(f, "package mathrand_test\n\nimport (\n\t\"testing\"\n\n\t\"github.com/xaionaro-go/rand/mathrand\"\n)\n")
		for _, method := range methods {
			if method.ResultSize != 4 {
				continue
			}
			err := templates.TestMethod.Execute(f, methodToValues(method))
			if err != nil {
				return err
			}
		}

	}

	{
		f, err := os.Create(`uint64_autogenerated_test.go`)
		if err != nil {
			return err
		}
		defer f.Close()

		fmt.Fprintf(f, "package mathrand_test\n\nimport (\n\t\"testing\"\n\n\t\"github.com/xaionaro-go/rand/mathrand\"\n)\n")
		for _, method := range methods {
			if method.ResultSize != 8 {
				continue
			}
			err := templates.TestMethod.Execute(f, methodToValues(method))
			if err != nil {
				return err
			}
		}

	}

	return nil
}
